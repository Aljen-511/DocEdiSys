# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import DisServ_pb2 as DisServ__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in DisServ_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class DisServStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.login = channel.unary_unary(
                '/DisServ.DisServ/login',
                request_serializer=DisServ__pb2.usr_info.SerializeToString,
                response_deserializer=DisServ__pb2.login_res.FromString,
                _registered_method=True)
        self.logout = channel.unary_unary(
                '/DisServ.DisServ/logout',
                request_serializer=DisServ__pb2.usr_info.SerializeToString,
                response_deserializer=DisServ__pb2.boolen_res.FromString,
                _registered_method=True)
        self.upload_document = channel.unary_unary(
                '/DisServ.DisServ/upload_document',
                request_serializer=DisServ__pb2.document.SerializeToString,
                response_deserializer=DisServ__pb2.boolen_res.FromString,
                _registered_method=True)
        self.recall_document = channel.unary_unary(
                '/DisServ.DisServ/recall_document',
                request_serializer=DisServ__pb2.document_info.SerializeToString,
                response_deserializer=DisServ__pb2.boolen_res.FromString,
                _registered_method=True)
        self.upload_patch = channel.unary_unary(
                '/DisServ.DisServ/upload_patch',
                request_serializer=DisServ__pb2.patch.SerializeToString,
                response_deserializer=DisServ__pb2.boolen_res.FromString,
                _registered_method=True)
        self.request_for_document = channel.unary_unary(
                '/DisServ.DisServ/request_for_document',
                request_serializer=DisServ__pb2.document_info.SerializeToString,
                response_deserializer=DisServ__pb2.document.FromString,
                _registered_method=True)
        self.request_for_patch = channel.unary_stream(
                '/DisServ.DisServ/request_for_patch',
                request_serializer=DisServ__pb2.patch.SerializeToString,
                response_deserializer=DisServ__pb2.patch.FromString,
                _registered_method=True)
        self.request_for_sharelist = channel.unary_unary(
                '/DisServ.DisServ/request_for_sharelist',
                request_serializer=DisServ__pb2.boolen_res.SerializeToString,
                response_deserializer=DisServ__pb2.doc_list.FromString,
                _registered_method=True)


class DisServServicer(object):
    """Missing associated documentation comment in .proto file."""

    def login(self, request, context):
        """用户申请登录与离线的rpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload_document(self, request, context):
        """用户上传文档的流rpc √
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def recall_document(self, request, context):
        """用户召回文档的rpc √
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload_patch(self, request, context):
        """用户上传补丁的rpc √
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def request_for_document(self, request, context):
        """用户请求文档的流rpc 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def request_for_patch(self, request, context):
        """用户轮询补丁的流rpc,request里的patch_item是空的, 只有时间戳和请求文档信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def request_for_sharelist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DisServServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=DisServ__pb2.usr_info.FromString,
                    response_serializer=DisServ__pb2.login_res.SerializeToString,
            ),
            'logout': grpc.unary_unary_rpc_method_handler(
                    servicer.logout,
                    request_deserializer=DisServ__pb2.usr_info.FromString,
                    response_serializer=DisServ__pb2.boolen_res.SerializeToString,
            ),
            'upload_document': grpc.unary_unary_rpc_method_handler(
                    servicer.upload_document,
                    request_deserializer=DisServ__pb2.document.FromString,
                    response_serializer=DisServ__pb2.boolen_res.SerializeToString,
            ),
            'recall_document': grpc.unary_unary_rpc_method_handler(
                    servicer.recall_document,
                    request_deserializer=DisServ__pb2.document_info.FromString,
                    response_serializer=DisServ__pb2.boolen_res.SerializeToString,
            ),
            'upload_patch': grpc.unary_unary_rpc_method_handler(
                    servicer.upload_patch,
                    request_deserializer=DisServ__pb2.patch.FromString,
                    response_serializer=DisServ__pb2.boolen_res.SerializeToString,
            ),
            'request_for_document': grpc.unary_unary_rpc_method_handler(
                    servicer.request_for_document,
                    request_deserializer=DisServ__pb2.document_info.FromString,
                    response_serializer=DisServ__pb2.document.SerializeToString,
            ),
            'request_for_patch': grpc.unary_stream_rpc_method_handler(
                    servicer.request_for_patch,
                    request_deserializer=DisServ__pb2.patch.FromString,
                    response_serializer=DisServ__pb2.patch.SerializeToString,
            ),
            'request_for_sharelist': grpc.unary_unary_rpc_method_handler(
                    servicer.request_for_sharelist,
                    request_deserializer=DisServ__pb2.boolen_res.FromString,
                    response_serializer=DisServ__pb2.doc_list.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DisServ.DisServ', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('DisServ.DisServ', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DisServ(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DisServ.DisServ/login',
            DisServ__pb2.usr_info.SerializeToString,
            DisServ__pb2.login_res.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DisServ.DisServ/logout',
            DisServ__pb2.usr_info.SerializeToString,
            DisServ__pb2.boolen_res.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def upload_document(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DisServ.DisServ/upload_document',
            DisServ__pb2.document.SerializeToString,
            DisServ__pb2.boolen_res.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def recall_document(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DisServ.DisServ/recall_document',
            DisServ__pb2.document_info.SerializeToString,
            DisServ__pb2.boolen_res.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def upload_patch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DisServ.DisServ/upload_patch',
            DisServ__pb2.patch.SerializeToString,
            DisServ__pb2.boolen_res.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def request_for_document(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DisServ.DisServ/request_for_document',
            DisServ__pb2.document_info.SerializeToString,
            DisServ__pb2.document.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def request_for_patch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/DisServ.DisServ/request_for_patch',
            DisServ__pb2.patch.SerializeToString,
            DisServ__pb2.patch.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def request_for_sharelist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DisServ.DisServ/request_for_sharelist',
            DisServ__pb2.boolen_res.SerializeToString,
            DisServ__pb2.doc_list.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
